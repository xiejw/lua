# vim: filetype=text

v2.1 notes

gabage collection
  lua (v2.1) is based on mark and sweep.

  free objects only have two kinds
    string and hash (aka associated array)
    for other types, they are part of the objects and value sematics

  trigger
    during creating of string and hash, lua_pack is called.

  design
    global symbol table is part of the root. all items in it (including their
        chilren) should be marked as live.

        global symbol table stores value as key (called key) and value (called
        ref)

    stack, same as global symbol table.
        all values are stored. not ptr.

    start from root set (global symbol and stack). mark all objects.
    sweep -> remove unused.


src code

  include
    lua.h       all public apis, lua_type
    lublib.h    prototypes for the public methods in clients

  src
    mem
      provides utilies for malloc/free
      provides macro newvector

    opcode.h
        OpCode    virtual machine opcodes.
        Value     Object Value. union of value or ptrs
        Object    Tag (lua_type) and Value
        Symbol    item in Symbol table; just Object

        macros
          get_word
          get_float
          get_code

    opcode.c

        LIST
          PUSHNIL   push a nil to top


        stack is an C array of Object

        callC

          CBase
            when calls C or C calls Lua, points to the first slot after the
            last parameter.
          CnResults
            when Lua calls C (CFunction), has the number of parameters
            when C calls Lua, has the number of results.

        doCall
          callC CFunction
          lua_execute lua function

          for MULT_RET adjust the top to fill NIL
          if provides a different `whereRes`, move results.
            ?? to pop up the paramsters or other frames?

        ?? pushsubscript
        ?? storesubscript

        do_proectedrun
            call a funciton with a fallback protection.

        lua_call(fn_name)
            lookup in symbol table
        lua_dofile(filename)
            read the file and call main.

        block
          stores the CBase (likes of fn call stack frame?)

          ?? but big object is address based. how to free them?

        ?? locked
          lua_getlocked
          lua_pushedLocalked
          lua_lock

        ?? where is the symbol
        ?? what does incooperate ojbect into stack mean.

        lua_getglobal
        lua_storeglobal
          both ref sematics

        lua_execute

  clients
      lua/strlib.c
        strlib_open
          lua_register all functions related to str

        str_find
          return the position of the first caracter of a substring

        str_len

        str_sub
          return the substring of a string, from start to end

        str_lower
        str_upper

      lib/mathlib.c
      lib/iolib.c
        similar helper methods

      lua/lua.a
        main file
          register all methods and read input file.


